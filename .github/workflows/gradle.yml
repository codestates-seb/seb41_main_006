# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

env:
  S3_BUCKET_NAME: mainproject6i

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

permissions:
  contents: read
jobs:
  build:

    runs-on: ubuntu-latest
    defaults:
        run: 
          working-directory: ./server

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Github에 등록한 Secret을 불러와 env.yml 생성
    - name: access to secrets
      env:
        JWT_SECRET_KEY: ${{secrets.JWT_SECRET_KEY}}
        JWT_ACCESS_TOKEN_EXPIRATION_MINUTES: ${{secrets.JWT_ACCESS_TOKEN_EXPIRATION_MINUTES}}
        JWT_REFRESH_TOKEN_EXPIRATION_MINUTES: ${{secrets.JWT_REFRESH_TOKEN_EXPIRATION_MINUTES}}
        EMAIL_USERNAME: ${{secrets.EMAIL_USERNAME}}
        EMAIL_PASSWORD: ${{secrets.EMAIL_PASSWORD}}
        DB_URL: ${{secrets.DB_URL}}
        DB_USERNAME: ${{secrets.DB_USERNAME}}
        DB_PASSWORD: ${{secrets.DB_PASSWORD}}
        S3_ACCESSKEY: ${{secrets.S3_ACCESSKEY}}
        S3_SECRETKEY: ${{secrets.S3_SECRETKEY}}
        S3_BUCKET: ${{secrets.S3_BUCKET}}
        S3_REGION: ${{secrets.S3_REGION}}
        S3_ENDPOINT: ${{secrets.S3_ENDPOINT}}
        ELASTICACHE_REDIS_ENDPOINT: ${{secrets.ELASTICACHE_REDIS_ENDPOINT}}
      run: |
        echo "JWT_SECRET_KEY=$JWT_SECRET_KEY" >> src/main/resources/env.yml
        echo "JWT_ACCESS_TOKEN_EXPIRATION_MINUTES=$JWT_ACCESS_TOKEN_EXPIRATION_MINUTES" >> src/main/resources/env.yml
        echo "JWT_REFRESH_TOKEN_EXPIRATION_MINUTES=$JWT_REFRESH_TOKEN_EXPIRATION_MINUTES" >> src/main/resources/env.yml
        echo "EMAIL_USERNAME=$EMAIL_USERNAME" >> src/main/resources/env.yml
        echo "EMAIL_PASSWORD=$EMAIL_PASSWORD" >> src/main/resources/env.yml
        echo "DB_URL=$DB_URL" >> src/main/resources/env.yml
        echo "DB_USERNAME=$DB_USERNAME" >> src/main/resources/env.yml
        echo "DB_PASSWORD=$DB_PASSWORD" >> src/main/resources/env.yml
        echo "S3_ACCESSKEY=$S3_ACCESSKEY" >> src/main/resources/env.yml
        echo "S3_SECRETKEY=$S3_SECRETKEY" >> src/main/resources/env.yml
        echo "S3_BUCKET=$S3_BUCKET" >> src/main/resources/env.yml
        echo "S3_REGION=$S3_REGION" >> src/main/resources/env.yml
        echo "S3_ENDPOINT=$S3_ENDPOINT" >> src/main/resources/env.yml
        echo "ELASTICACHE_REDIS_ENDPOINT=$ELASTICACHE_REDIS_ENDPOINT" >> src/main/resources/env.yml

    - name: Build with Gradle
      run: ./gradlew build
      
    # build한 후 프로젝트를 압축합니다.
    - name: Make zip file
      run: zip -r ./server.zip .
      shell: bash
    
    # Access Key와 Secret Access Key를 통해 권한을 확인합니다.
    # 아래 코드에 Access Key와 Secret Key를 직접 작성하지 않습니다.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-region: ap-northeast-2
    
    # 압축한 프로젝트를 S3로 전송합니다.
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./server.zip s3://$S3_BUCKET_NAME/server.zip

    # CodeDeploy에게 배포 명령을 내립니다.
    - name: Code Deploy
      run: >
        aws deploy create-deployment --application-name seb41_main_006
        --deployment-config-name CodeDeployDefault.AllAtOnce
        --deployment-group-name seb41_main_006
        --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=server.zip
